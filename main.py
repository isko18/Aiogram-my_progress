from aiogram import Bot,types, Dispatcher, executor
from dotenv import load_dotenv
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import os
import time


load_dotenv(".env")

from start import CustomDB

db = CustomDB()
connect = db.connect
db.connect_db()


inline_buttons = [
    InlineKeyboardButton('–°—Ç–∞—Ä—Ç', callback_data='start'),
    InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help'),
    InlineKeyboardButton('Backend', callback_data='Backend'),
    InlineKeyboardButton('Frontend', callback_data='Frontend'),
    InlineKeyboardButton('Uxui', callback_data='Uxui'),
    InlineKeyboardButton('Android', callback_data='Android'),
    InlineKeyboardButton('IOS', callback_data='ios'),
  


]

button = InlineKeyboardMarkup().add(*inline_buttons)

bot = Bot(os.environ.get('TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())
storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=['start'])
async def start(message:types.Message):
    cursor = connect.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = {message.from_user.id};")
    res = cursor.fetchall()
    if res == []:
        cursor.execute(f"INSERT INTO users VALUES ('{message.from_user.username}', '{message.from_user.first_name}', '{message.from_user.last_name}', {message.from_user.id}, '{time.ctime()}');")
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.full_name}')
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –≤–∞—Å –≤ IT –∞–∫–∞–¥–µ–º–∏–∏, My_progress")
    await message.answer("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏–πüëá")
    await message.answer("–ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–µ—Ç–µ—Å—å –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –Ω–∞–ø–∏—à–∏—Ç–µ /help", reply_markup=button)
    connect.commit()

@dp.callback_query_handler(lambda call: call)
async def all(call):
    if call.data == "start":
        await start(call.message)
    elif call.data == "help":
        await helper(call.message)
    elif call.data == "Backend":
        await back(call.message)
    elif call.data == "Frontend":
        await front(call.message)
    elif call.data == "Uxui":
        await ux(call.message)
    elif call.data == "Android":
        await andr(call.message)
    elif call.data == "ios":
        await ios(call.message)
   


@dp.message_handler(commands=['help'])
async def helper(message:types.Message):
    await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: isko")


@dp.message_handler(commands=['Backend'])
async def back(message:types.Message):
    await message.answer("Backend ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å —Å–∞–π—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç.–¥\n–°—Ç–æ–∏–º–æ—Å—Ç—å 10000 —Å–æ–º –≤ –º–µ—Å—è—Ü\n–û–±—É—á–µ–Ω–∏–µ: 5 –º–µ—Å—è—Ü")


@dp.message_handler(commands=['Frontend'])
async def front(message:types.Message):
    await message.answer("Frontend ‚Äî Frontend ‚Äî —ç—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –≤–µ–±-—Å–∞–π—Ç–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n–°—Ç–æ–∏–º–æ—Å—Ç—å 10000 —Å–æ–º –≤ –º–µ—Å—è—Ü\n–û–±—É—á–µ–Ω–∏–µ: 5 –º–µ—Å—è—Ü")


@dp.message_handler(commands=['Uxui'])
async def ux(message:types.Message):
    await message.answer("Uxui ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å —Å–∞–π—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç.–¥\n–°—Ç–æ–∏–º–æ—Å—Ç—å 10000 —Å–æ–º –≤ –º–µ—Å—è—Ü\n–û–±—É—á–µ–Ω–∏–µ: 3 –º–µ—Å—è—Ü")


@dp.message_handler(commands=['Android'])
async def andr(message:types.Message):
    await message.answer("Android ‚Äî –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Ö —Ä–∞–±–æ—Ç—É\n–°—Ç–æ–∏–º–æ—Å—Ç—å 10000 —Å–æ–º –≤ –º–µ—Å—è—Ü\n–û–±—É—á–µ–Ω–∏–µ: 7 –º–µ—Å—è—Ü")

@dp.message_handler(commands=['ios'])
async def ios(message:types.Message):
    await message.answer("IOS ‚Äî —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n–°—Ç–æ–∏–º–æ—Å—Ç—å 10000 —Å–æ–º –≤ –º–µ—Å—è—Ü\n–û–±—É—á–µ–Ω–∏–µ: 7 –º–µ—Å—è—Ü")


executor.start_polling(dp)